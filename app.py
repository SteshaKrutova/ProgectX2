import atexit
from flask import Flask, render_template, redirect, url_for, flash, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import os
from datetime import datetime
from flask_mail import Mail, Message
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta  # –î–æ–±–∞–≤—å—Ç–µ timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import requests  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import os
from dotenv import load_dotenv  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY') or 'dev-key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(os.path.dirname(__file__), 'instance', 'database.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Email
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')  # –í–∞—à email
app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')  # –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.config['MAIL_DEFAULT_SENDER'] = os.environ.get('MAIL_USERNAME')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.login_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É'
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Mail –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
mail = Mail(app)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
def send_email(to, subject, template, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    :param to: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    :param subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
    :param template: –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
    :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    """
    try:
        msg = Message(
            subject=subject,
            recipients=[to],
            html=template.format(**kwargs),
            charset='utf-8'
        )
        mail.send(msg)
        app.logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to}")
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")

# –®–∞–±–ª–æ–Ω—ã email —Å–æ–æ–±—â–µ–Ω–∏–π
EMAIL_TEMPLATES = {
    'service_connected': {
        'subject': '‚úÖ –£—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ - ProjectX2',
        'template': '''
        <h2>–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
        <p>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É—Å–ª—É–≥—É <strong>"{service_name}"</strong>.</p>
        <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {price} —Ä—É–±.</p>
        <p><strong>–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> {connection_date}</p>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:</strong><br>{description}</p>
        <hr>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
        '''
    },
    'service_disconnected': {
        'subject': '‚ùå –£—Å–ª—É–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - ProjectX2',
        'template': '''
        <h2>–£—Å–ª—É–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
        <p>–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —É—Å–ª—É–≥—É <strong>"{service_name}"</strong>.</p>
        <p><strong>–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:</strong> {refund_amount} —Ä—É–±.</p>
        <p><strong>–î–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:</strong> {disconnection_date}</p>
        <hr>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
        '''
    },
    'balance_replenished': {
        'subject': 'üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω - ProjectX2',
        'template': '''
        <h2>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
        <p>–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <strong>{amount} —Ä—É–±.</strong></p>
        <p><strong>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</strong> {new_balance} —Ä—É–±.</p>
        <p><strong>–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:</strong> {operation_date}</p>
        <hr>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
        '''
    },
    # –î–æ–±–∞–≤—å—Ç–µ –≤ EMAIL_TEMPLATES
    'new_customer_connection': {
        'subject': 'üéâ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ - ProjectX2',
    'template': '''
    <h2>–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!</h2>
    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
    <p>–ö–ª–∏–µ–Ω—Ç <strong>{client_name}</strong> –ø–æ–¥–∫–ª—é—á–∏–ª –≤–∞—à—É —É—Å–ª—É–≥—É <strong>"{service_name}"</strong>.</p>
    <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {price} —Ä—É–±.</p>
    <p><strong>–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> {connection_date}</p>
    <p><strong>Email –∫–ª–∏–µ–Ω—Ç–∞:</strong> {client_email}</p>
    <hr>
    <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
    '''
}   
}

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(UserMixin, db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    role = db.Column(db.String(20), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_active = db.Column(db.Boolean, default=True)
    services = db.relationship('UserService', backref='user', lazy=True)
    balance = db.Column(db.Float, default=0.0)  # –ë–∞–ª–∞–Ω—Å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.username}, Role: {self.role}>'

class Service(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    price = db.Column(db.Float, default=0.0)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    customer_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    
    users = db.relationship('UserService', backref='service', lazy=True)

class UserService(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    service_id = db.Column(db.Integer, db.ForeignKey('service.id'), nullable=False)
    is_active = db.Column(db.Boolean, default=True)
    connected_at = db.Column(db.DateTime, default=datetime.utcnow)
    price_at_connection = db.Column(db.Float)
    
    __table_args__ = (
        db.UniqueConstraint('user_id', 'service_id', name='_user_service_uc'),
    )

class UsedPromoCode(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    promo_code = db.Column(db.String(50), nullable=False)
    used_at = db.Column(db.DateTime, default=datetime.utcnow)
    amount = db.Column(db.Float, nullable=False)
    
    user = db.relationship('User', backref=db.backref('used_promo_codes', lazy=True))

    def __repr__(self):
        return f'<UsedPromoCode {self.promo_code} by User {self.user_id}>'

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    type = db.Column(db.String(20), nullable=False)  # 'expense' –∏–ª–∏ 'refund'
    amount = db.Column(db.Float, nullable=False)
    description = db.Column(db.String(200), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    service_id = db.Column(db.Integer, db.ForeignKey('service.id'), nullable=True)
    
    user = db.relationship('User', backref=db.backref('transactions', lazy=True))
    service = db.relationship('Service', backref=db.backref('transactions', lazy=True))

    def __repr__(self):
        return f'<Transaction {self.type} {self.amount} by User {self.user_id}>'
    
class PromoCode(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    code = db.Column(db.String(50), unique=True, nullable=False)  # –õ—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã
    amount = db.Column(db.Float, nullable=False)
    created_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_active = db.Column(db.Boolean, default=True)
    
    creator = db.relationship('User', backref=db.backref('created_promo_codes', lazy=True))

    def __repr__(self):
        return f'<PromoCode {self.code} - {self.amount} —Ä—É–±.>'
    
class PingHistory(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    ip_address = db.Column(db.String(45), nullable=False)  # IPv6 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 45 —Å–∏–º–≤–æ–ª–æ–≤
    result = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    user = db.relationship('User', backref=db.backref('ping_history', lazy=True))

    def __repr__(self):
        return f'<PingHistory {self.ip_address} by User {self.user_id}>'
    
class ServerMonitor(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    ip_address = db.Column(db.String(45), nullable=False)
    is_online = db.Column(db.Boolean, default=True)
    last_check = db.Column(db.DateTime, default=datetime.utcnow)
    last_notification = db.Column(db.DateTime, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    user = db.relationship('User', backref=db.backref('monitored_servers', lazy=True))

    def __repr__(self):
        return f'<ServerMonitor {self.ip_address} - {"Online" if self.is_online else "Offline"}>'
    
class WeatherMonitor(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    city = db.Column(db.String(100), nullable=False)
    last_check = db.Column(db.DateTime, default=datetime.utcnow)
    last_notification = db.Column(db.DateTime, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    user = db.relationship('User', backref=db.backref('weather_monitors', lazy=True))

    def __repr__(self):
        return f'<WeatherMonitor {self.city} - User {self.user_id}>'
    
def get_weather_data(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å OpenWeatherMap API"""
    try:
        API_KEY = os.environ.get('OPENWEATHER_API_KEY') or 'your_api_key_here'
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
        
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if response.status_code == 200:
            return {
                'success': True,
                'city': data['name'],
                'temperature': data['main']['temp'],
                'feels_like': data['main']['feels_like'],
                'humidity': data['main']['humidity'],
                'description': data['weather'][0]['description'],
                'weather_main': data['weather'][0]['main'],
                'wind_speed': data['wind']['speed'],
                'uv_index': 2  # –î–ª—è –¥–µ–º–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π API –¥–ª—è UV
            }
        else:
            return {'success': False, 'error': data.get('message', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã')}
            
    except Exception as e:
        return {'success': False, 'error': str(e)}
    
def generate_weather_recommendations(weather_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    recommendations = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –£–§ –∏–Ω–¥–µ–∫—Å–∞
    if weather_data['uv_index'] > 2:
        recommendations.append("üß¥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º (SPF)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if weather_data['temperature'] < 10:
        recommendations.append("üß£ –¢–µ–ø–ª–æ –æ–¥–µ–Ω—å—Ç–µ—Å—å")
    elif weather_data['temperature'] > 25:
        recommendations.append("üß¢ –ù–∞–¥–µ–Ω—å—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ—Ç —Å–æ–ª–Ω—Ü–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–∞–¥–∫–æ–≤
    if '–¥–æ–∂–¥—å' in weather_data['description'].lower() or weather_data['weather_main'] == 'Rain':
        recommendations.append("‚òÇÔ∏è –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç")
    elif weather_data['weather_main'] == 'Clear':
        recommendations.append("üòé –°–æ–ª–Ω–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏ –±—É–¥—É—Ç –∫—Å—Ç–∞—Ç–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç—Ä–∞
    if weather_data['wind_speed'] > 5:
        recommendations.append("üß• –í–µ—Ç—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ä–æ–∑–∞
    if weather_data['temperature'] < 0:
        recommendations.append("üß§ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫—É—é –ø–æ–º–∞–¥—É")
    
    return recommendations

def send_weather_report():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–≥–æ–¥–µ"""
    with app.app_context():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–æ–π –ø–æ–≥–æ–¥—ã
            weather_service = Service.query.filter_by(name='–°–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π').first()
            
            if weather_service:
                user_services = UserService.query.filter_by(
                    service_id=weather_service.id,
                    is_active=True
                ).all()
                
                for user_service in user_services:
                    user = user_service.user
                    weather_monitors = WeatherMonitor.query.filter_by(user_id=user.id).all()
                    
                    for monitor in weather_monitors:
                        weather_data = get_weather_data(monitor.city)
                        
                        if weather_data['success']:
                            recommendations = generate_weather_recommendations(weather_data)
                            
                            template_data = {
                                'subject': f'üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {weather_data["city"]} - ProjectX2',
                                'template': '''
                                <h2>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</h2>
                                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
                                <p>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ <strong>{city}</strong> –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</p>
                                
                                <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 15px 0;">
                                    <p><strong>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)</p>
                                    <p><strong>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</strong> {humidity}%</p>
                                    <p><strong>üå¨Ô∏è –í–µ—Ç–µ—Ä:</strong> {wind_speed} –º/—Å</p>
                                    <p><strong>‚òÄÔ∏è –£–§ –∏–Ω–¥–µ–∫—Å:</strong> {uv_index}</p>
                                    <p><strong>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {description}</p>
                                </div>
                                
                                <h3>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
                                <ul>
                                    {recommendations}
                                </ul>
                                
                                <p><strong>‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> {update_time}</p>
                                <hr>
                                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
                                '''
                            }
                            
                            recommendations_html = ''
                            if recommendations:
                                recommendations_html = ''.join([f'<li>{rec}</li>' for rec in recommendations])
                            else:
                                recommendations_html = '<li>–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞! –û—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç.</li>'
                            
                            send_email(
                                to=user.email,
                                subject=template_data['subject'],
                                template=template_data['template'],
                                username=user.username,
                                city=weather_data['city'],
                                temperature=weather_data['temperature'],
                                feels_like=weather_data['feels_like'],
                                humidity=weather_data['humidity'],
                                wind_speed=weather_data['wind_speed'],
                                uv_index=weather_data['uv_index'],
                                description=weather_data['description'],
                                recommendations=recommendations_html,
                                update_time=datetime.utcnow().strftime('%d.%m.%Y %H:%M')
                            )
                            
                            monitor.last_notification = datetime.utcnow()
                            db.session.commit()
                            
        except Exception as e:
            app.logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–≥–æ–¥–µ: {str(e)}')
def check_monitored_servers():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    with app.app_context():
        servers_to_check = ServerMonitor.query.filter(
            ServerMonitor.last_check < datetime.utcnow() - timedelta(minutes=5)
        ).all()
        
        for server in servers_to_check:
            try:
                import platform
                import subprocess
                
                param = '-n' if platform.system().lower() == 'windows' else '-c'
                command = ['ping', param, '4', server.ip_address]
                
                result = subprocess.run(command, capture_output=True, text=True, timeout=10)
                is_online = result.returncode == 0
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                if server.is_online != is_online:
                    server.is_online = is_online
                    server.last_notification = datetime.utcnow()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
                    template_data = {
                        'subject': '‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ - ProjectX2' if not is_online else '‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω - ProjectX2',
                        'template': '''
                        <h2>{title}</h2>
                        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
                        <p>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ <strong>{ip_address}</strong> –∏–∑–º–µ–Ω–∏–ª—Å—è.</p>
                        <p><strong>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</strong> {status}</p>
                        <p><strong>–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</strong> {change_time}</p>
                        <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç ping:</strong></p>
                        <pre>{ping_result}</pre>
                        <hr>
                        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
                        '''
                    }
                    
                    send_email(
                        to=server.user.email,
                        subject=template_data['subject'],
                        template=template_data['template'],
                        username=server.user.username,
                        ip_address=server.ip_address,
                        title='–°–µ—Ä–≤–µ—Ä —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' if not is_online else '–°–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω',
                        status='–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå' if not is_online else '–î–æ—Å—Ç—É–ø–µ–Ω ‚úÖ',
                        change_time=datetime.utcnow().strftime('%d.%m.%Y %H:%M'),
                        ping_result=result.stdout if result.returncode == 0 else result.stderr
                    )
                
                # –ï–∂–µ—á–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                elif (server.last_notification is None or 
                      server.last_notification < datetime.utcnow() - timedelta(hours=1)):
                    if server.is_online:
                        template_data = {
                            'subject': 'üìä –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω - ProjectX2',
                            'template': '''
                            <h2>–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω</h2>
                            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
                            <p>–°–µ—Ä–≤–µ—Ä <strong>{ip_address}</strong> —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –î–æ—Å—Ç—É–ø–µ–Ω ‚úÖ</p>
                            <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</strong> {check_time}</p>
                            <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç ping:</strong></p>
                            <pre>{ping_result}</pre>
                            <hr>
                            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
                            '''
                        }
                        
                        send_email(
                            to=server.user.email,
                            subject=template_data['subject'],
                            template=template_data['template'],
                            username=server.user.username,
                            ip_address=server.ip_address,
                            check_time=datetime.utcnow().strftime('%d.%m.%Y %H:%M'),
                            ping_result=result.stdout
                        )
                    
                    server.last_notification = datetime.utcnow()
                
                server.last_check = datetime.utcnow()
                db.session.commit()
                
            except Exception as e:
                app.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server.ip_address}: {str(e)}')

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = BackgroundScheduler()
scheduler.add_job(func=check_monitored_servers, trigger="interval", minutes=5)
scheduler.add_job(func=send_weather_report, trigger="cron", hour=7, minute=0)
scheduler.start()
atexit.register(lambda: scheduler.shutdown() if scheduler.running else None)



# –ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    if current_user.is_authenticated:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        active_services_count = Service.query.filter_by(is_active=True).count()
        total_connections = UserService.query.filter_by(is_active=True).count()
        
        # –†–∞—Å—á–µ—Ç –æ–±–æ—Ä–æ—Ç–∞ (—Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥)
        total_revenue = db.session.query(db.func.sum(UserService.price_at_connection)).scalar() or 0
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)
        recent_connections = UserService.query.order_by(UserService.connected_at.desc()).limit(5).all()
        recent_activity = len(recent_connections)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        recent_activities = []
        for conn in recent_connections:
            recent_activities.append({
                'icon': '‚úÖ',
                'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {conn.user.username} –ø–æ–¥–∫–ª—é—á–∏–ª —É—Å–ª—É–≥—É "{conn.service.name}"',
                'timestamp': conn.connected_at.strftime('%d.%m.%Y %H:%M')
            })
        
        return render_template('index.html',
                             active_services_count=active_services_count,
                             total_connections=total_connections,
                             total_revenue=total_revenue,
                             recent_activity=recent_activity,
                             recent_activities=recent_activities)
    
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        remember_me = bool(request.form.get('remember_me'))
        
        if not username or not password:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.', 'error')
            return render_template('login.html')
        
        user = User.query.filter_by(username=username).first()
        
        if user is None or not user.check_password(password):
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'error')
            return render_template('login.html')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        if not user.is_active:
            flash('–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', 'error')
            return render_template('login.html')
        
        login_user(user, remember=remember_me)
        return redirect(url_for('index'))
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        email = request.form.get('email', '').strip().lower()
        password = request.form.get('password', '')
        password_confirm = request.form.get('password_confirm', '')
        
        # –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        role = 'client'
        
        errors = []
        
        if not all([username, email, password, password_confirm]):
            errors.append('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.')
        
        if len(username) < 3:
            errors.append('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.')
        
        if len(password) < 6:
            errors.append('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.')
        
        if password != password_confirm:
            errors.append('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.')
        
        if User.query.filter_by(username=username).first():
            errors.append('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        
        if User.query.filter_by(email=email).first():
            errors.append('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        
        if errors:
            for error in errors:
                flash(error, 'error')
            return render_template('register.html')
        
        try:
            new_user = User(
                username=username,
                email=email,
                role=role
            )
            new_user.set_password(password)
            db.session.add(new_user)
            db.session.commit()
            
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success')
            return redirect(url_for('login'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}', 'error')
            return render_template('register.html')
    
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html', user=current_user)

@app.route('/admin/users')
@login_required
def admin_users():
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    users = User.query.order_by(User.created_at.desc()).all()
    return render_template('admin_users.html', users=users)

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–õ–£–ì–ê–ú–ò –î–õ–Ø –ó–ê–ö–ê–ó–ß–ò–ö–ê ==================

@app.route('/customer/services')
@login_required
def customer_services():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    services = Service.query.filter_by(customer_id=current_user.id).order_by(Service.created_at.desc()).all()
    return render_template('customer_services.html', services=services)

@app.route('/customer/service/create', methods=['POST'])
@login_required
def create_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('customer_services'))
    
    name = request.form.get('name', '').strip()
    description = request.form.get('description', '').strip()
    
    try:
        price = float(request.form.get('price', 0))
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏', 'error')
        return redirect(url_for('customer_services'))
    
    if not name or not description or price <= 0:
        flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
        return redirect(url_for('customer_services'))
    
    try:
        new_service = Service(
            name=name,
            description=description,
            price=price,
            customer_id=current_user.id
        )
        db.session.add(new_service)
        db.session.commit()
        flash('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}', 'error')
    
    return redirect(url_for('customer_services'))

@app.route('/customer/service/update/<int:service_id>', methods=['POST'])
@login_required
def update_service(service_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('customer_services'))
    
    service = Service.query.filter_by(id=service_id, customer_id=current_user.id).first()
    if not service:
        flash('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('customer_services'))
    
    name = request.form.get('name', '').strip()
    description = request.form.get('description', '').strip()
    
    try:
        price = float(request.form.get('price', 0))
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏', 'error')
        return redirect(url_for('customer_services'))
    
    if not name or not description or price <= 0:
        flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
        return redirect(url_for('customer_services'))
    
    try:
        service.name = name
        service.description = description
        service.price = price
        db.session.commit()
        flash('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}', 'error')
    
    return redirect(url_for('customer_services'))

@app.route('/customer/service/delete/<int:service_id>')
@login_required
def delete_service(service_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    service = Service.query.filter_by(id=service_id, customer_id=current_user.id).first()
    if not service:
        flash('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('customer_services'))
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π
        UserService.query.filter_by(service_id=service_id).delete()
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É —É—Å–ª—É–≥—É
        db.session.delete(service)
        db.session.commit()
        flash('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}', 'error')
    
    return redirect(url_for('customer_services'))

@app.route('/customer/service/toggle/<int:service_id>')
@login_required
def toggle_service(service_id):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    service = Service.query.filter_by(id=service_id, customer_id=current_user.id).first()
    if not service:
        flash('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('customer_services'))
    
    try:
        service.is_active = not service.is_active
        db.session.commit()
        status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if service.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
        flash(f'–£—Å–ª—É–≥–∞ "{service.name}" {status}!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏: {str(e)}', 'error')
    
    return redirect(url_for('customer_services'))

@app.route('/customer/stats')
@login_required
def customer_stats():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    services = Service.query.filter_by(customer_id=current_user.id).all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    active_services_count = Service.query.filter_by(
        customer_id=current_user.id, 
        is_active=True
    ).count()
    
    total_connections = UserService.query.join(Service).filter(
        Service.customer_id == current_user.id,
        UserService.is_active == True
    ).count()
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
    total_revenue = db.session.query(
        db.func.sum(UserService.price_at_connection)
    ).join(Service).filter(
        Service.customer_id == current_user.id
    ).scalar() or 0
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    recent_activity = UserService.query.join(Service).filter(
        Service.customer_id == current_user.id,
        UserService.connected_at >= datetime.utcnow() - timedelta(hours=24)
    ).count()
    
    return render_template('customer_stats.html',
                         services=services,
                         active_services_count=active_services_count,
                         total_connections=total_connections,
                         total_revenue=total_revenue,
                         recent_activity=recent_activity)

# ================== –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ –ö–õ–ò–ï–ù–¢–ê - –ú–û–ò –£–°–õ–£–ì–ò ==================

@app.route('/client/services')
@login_required
def client_services():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∏—Ö —É—Å–ª—É–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    if current_user.role != 'client':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
    all_services = Service.query.filter_by(is_active=True).all()
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
    user_services = UserService.query.filter_by(user_id=current_user.id).all()
    connected_service_ids = [us.service_id for us in user_services]
    
    return render_template('client_services.html', 
                         services=all_services,
                         connected_service_ids=connected_service_ids,
                         user_services=user_services)

@app.route('/client/service/connect/<int:service_id>')
@login_required
def connect_service(service_id):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if current_user.role != 'client':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    service = Service.query.filter_by(id=service_id, is_active=True).first()
    if not service:
        flash('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞', 'error')
        return redirect(url_for('client_services'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É–∂–µ —É—Å–ª—É–≥–∞
    existing_connection = UserService.query.filter_by(
        user_id=current_user.id, 
        service_id=service_id
    ).first()
    
    if existing_connection:
        flash('–£—Å–ª—É–≥–∞ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'info')
        return redirect(url_for('client_services'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if current_user.balance < service.price:
        flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', 'error')
        return redirect(url_for('client_services'))
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        current_user.balance -= service.price
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —É—Å–ª—É–≥—É
        user_service = UserService(
            user_id=current_user.id,
            service_id=service_id,
            price_at_connection=service.price,
            is_active=True
        )
        db.session.add(user_service)
        
        # ‚òÖ‚òÖ‚òÖ‚òÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–£–Æ –ù–ê–°–¢–†–û–ô–ö–£ –°–ê–ù–ö–¢-–ü–ï–¢–ï–†–ë–£–†–ì–ê ‚òÖ‚òÖ‚òÖ‚òÖ
        if service.name == '–°–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π':
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã –≤ –°–ü–± –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            weather_monitor = WeatherMonitor(
                user_id=current_user.id,
                city='–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
            )
            db.session.add(weather_monitor)
            flash('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ!', 'info')
        
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏
        if service.name == '–°–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π':
            template_data = {
                'subject': 'üå§Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ —Å–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π - ProjectX2',
                'template': '''
                <h2>–£—Å–ª—É–≥–∞ "–°–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π" –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!</h2>
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
                <p>–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É—Å–ª—É–≥—É: <strong>"{service_name}"</strong></p>
                <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {price} —Ä—É–±.</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {description}</p>
                <p><strong>–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> {connection_date}</p>
                
                <h3>üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:</h3>
                <ul>
                    <li>üìç –ì–æ—Ä–æ–¥: <strong>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</strong></li>
                    <li>‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: <strong>7:00 —É—Ç—Ä–∞</strong></li>
                </ul>
                
                <h3>üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏:</h3>
                <ul>
                    <li>üå§Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø–æ–≥–æ–¥–µ</li>
                    <li>üìß –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ</li>
                    <li>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ SPF –∑–∞—â–∏—Ç—ã</li>
                    <li>‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é</li>
                </ul>
                
                <h3>üéØ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</h3>
                <ol>
                    <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–≥–æ–¥–µ –∑–∞–≤—Ç—Ä–∞ –≤ 7:00</li>
                    <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É" –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤</li>
                    <li>–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</li>
                </ol>
                
                <hr>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
                '''
            }
        else:
            template_data = {
                'subject': 'üéâ –£—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ - ProjectX2',
                'template': '''
                <h2>–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!</h2>
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
                <p>–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É—Å–ª—É–≥—É: <strong>"{service_name}"</strong></p>
                <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {price} —Ä—É–±.</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {description}</p>
                <p><strong>–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> {connection_date}</p>
                <h3>üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏:</h3>
                <ul>
                    <li>üîç Ping –ª—é–±—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –∏ –¥–æ–º–µ–Ω–æ–≤</li>
                    <li>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤</li>
                    <li>üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–æ–≤</li>
                    <li>üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫</li>
                </ul>
                <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="{ping_url}">—Ä–∞–∑–¥–µ–ª Ping —Å–µ—Ä–≤–∏—Å–∞</a></p>
                <hr>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
                '''
            }
        
        send_email(
            to=current_user.email,
            subject=template_data['subject'],
            template=template_data['template'],
            username=current_user.username,
            service_name=service.name,
            price=service.price,
            description=service.description,
            connection_date=datetime.utcnow().strftime('%d.%m.%Y %H:%M'),
            ping_url=url_for('ping_service', _external=True)
        )
        
        flash(f'–£—Å–ª—É–≥–∞ "{service.name}" —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.', 'success')
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}', 'error')
    
    return redirect(url_for('client_services'))

@app.route('/client/service/disconnect/<int:service_id>')
@login_required
def disconnect_service(service_id):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    if current_user.role != 'client':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    user_service = db.session.query(UserService).options(
    selectinload(UserService.service)  # –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç service
).filter_by(
    user_id=current_user.id, 
    service_id=service_id
).first()
    
    if not user_service:
        flash('–£—Å–ª—É–≥–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'error')
        return redirect(url_for('client_services'))
    
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ (50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
        refund_amount = user_service.price_at_connection * 0.5
        current_user.balance += refund_amount
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        db.session.delete(user_service)
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ :cite[7]
        template_data = EMAIL_TEMPLATES['service_disconnected']
        send_email(
            to=current_user.email,
            subject=template_data['subject'],
            template=template_data['template'],
            username=current_user.username,
            service_name=user_service.service.name,
            refund_amount=refund_amount,
            disconnection_date=datetime.utcnow().strftime('%d.%m.%Y %H:%M')
        )
        
        flash(f'–£—Å–ª—É–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refund_amount:.2f} —Ä—É–±.', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}', 'error')
    
    return redirect(url_for('client_services'))

@app.route('/client/add_balance', methods=['POST'])
@login_required
def add_balance():
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    if current_user.role != 'client':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    try:
        amount = float(request.form.get('amount', 0))
        if amount <= 0:
            return jsonify({'success': False, 'message': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'}), 400
        
        current_user.balance += amount
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ :cite[7]
        template_data = EMAIL_TEMPLATES['balance_replenished']
        send_email(
            to=current_user.email,
            subject=template_data['subject'],
            template=template_data['template'],
            username=current_user.username,
            amount=amount,
            new_balance=current_user.balance,
            operation_date=datetime.utcnow().strftime('%d.%m.%Y %H:%M')
        )
        
        return jsonify({
            'success': True, 
            'new_balance': current_user.balance,
            'message': f'–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.'
        })
        
    except ValueError:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞'}), 400
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500
    
##–¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@app.route('/admin/users/add', methods=['GET', 'POST'])
@login_required
def admin_add_user():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        email = request.form.get('email', '').strip().lower()
        password = request.form.get('password', '')
        password_confirm = request.form.get('password_confirm', '')
        role = request.form.get('role', '').strip()
        balance = request.form.get('balance', '0').strip()
        
        errors = []
        
        if not all([username, email, password, password_confirm, role]):
            errors.append('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.')
        
        if len(username) < 3:
            errors.append('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.')
        
        if len(password) < 6:
            errors.append('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.')
        
        if password != password_confirm:
            errors.append('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.')
        
        if role not in ['client', 'customer', 'admin']:
            errors.append('–£–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å.')
        
        try:
            balance = float(balance)
            if balance < 0:
                errors.append('–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.')
        except ValueError:
            errors.append('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞.')
        
        if User.query.filter_by(username=username).first():
            errors.append('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        
        if User.query.filter_by(email=email).first():
            errors.append('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        
        if errors:
            for error in errors:
                flash(error, 'error')
            return render_template('admin_add_user.html')
        
        try:
            new_user = User(
                username=username,
                email=email,
                role=role,
                balance=balance
            )
            new_user.set_password(password)
            db.session.add(new_user)
            db.session.commit()
            
            flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success')
            return redirect(url_for('admin_users'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}', 'error')
            return render_template('admin_add_user.html')
    
    return render_template('admin_add_user.html')

@app.route('/add-balance')
@login_required
def add_balance_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    if current_user.role != 'client':
        flash('–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥
    promo_used = UsedPromoCode.query.filter_by(
        user_id=current_user.id, 
        promo_code='progectx2'
    ).first() is not None
    
    return render_template('add_balance.html', promo_used=promo_used)

@app.route('/apply-promo', methods=['POST'])
@login_required
def apply_promo():
    if current_user.role != 'client':
        flash('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º', 'error')
        return redirect(url_for('index'))
    
    promo_code = request.form.get('promo_code', '').strip()
    
    # –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    promo = PromoCode.query.filter_by(code=promo_code, is_active=True).first()
    
    if promo:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        already_used = UsedPromoCode.query.filter_by(
            user_id=current_user.id, 
            promo_code=promo_code
        ).first()
        
        if already_used:
            flash('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ', 'error')
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            current_user.balance += promo.amount
            new_used_promo = UsedPromoCode(
                user_id=current_user.id,
                promo_code=promo_code,
                amount=promo.amount
            )
            db.session.add(new_used_promo)
            db.session.commit()
            flash(f'üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ {promo.amount} —Ä—É–±–ª–µ–π.', 'success')
    else:
        flash('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥', 'error')
    
    return redirect(url_for('add_balance_page'))

@app.route('/client/expense-history')
@login_required
def expense_history():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
    if current_user.role != 'client':
        flash('–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º', 'error')
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_services = UserService.query.filter_by(user_id=current_user.id).all()
    
    return render_template('expense_history.html', 
                         user_services=user_services,
                         user=current_user)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/admin/user/toggle/<int:user_id>')
@login_required
def toggle_user(user_id):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    user = User.query.get_or_404(user_id)
    
    if user.id == current_user.id:
        flash('–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç', 'error')
        return redirect(url_for('admin_users'))
    
    try:
        user.is_active = not user.is_active
        db.session.commit()
        
        status = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} {status}!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}', 'error')
    
    return redirect(url_for('admin_users'))

# –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä login_required –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
@app.before_request
def check_user_active():
    if current_user.is_authenticated and not current_user.is_active:
        logout_user()
        flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', 'error')
        return redirect(url_for('login'))
    
@app.route('/admin/user/delete/<int:user_id>')
@login_required
def delete_user(user_id):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    user = User.query.get_or_404(user_id)
    
    if user.id == current_user.id:
        flash('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç', 'error')
        return redirect(url_for('admin_users'))
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserService.query.filter_by(user_id=user_id).delete()
        UsedPromoCode.query.filter_by(user_id=user_id).delete()
        Transaction.query.filter_by(user_id=user_id).delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.session.delete(user)
        db.session.commit()
        
        flash(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}', 'error')
    
    return redirect(url_for('admin_users'))
# —Å–∏—Å—Ç–µ–º–∞  –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
@app.route('/customer/promo-codes')
@login_required
def customer_promo_codes():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    promo_codes = PromoCode.query.filter_by(created_by=current_user.id).order_by(PromoCode.created_at.desc()).all()
    return render_template('customer_promo_codes.html', promo_codes=promo_codes)

@app.route('/customer/promo-code/create', methods=['POST'])
@login_required
def create_promo_code():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('customer_promo_codes'))
    
    code = request.form.get('code', '').strip()
    
    try:
        amount = float(request.form.get('amount', 0))
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞', 'error')
        return redirect(url_for('customer_promo_codes'))
    
    if not code or amount <= 0:
        flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
        return redirect(url_for('customer_promo_codes'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ (–±–µ–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    existing_promo = PromoCode.query.filter_by(code=code).first()
    if existing_promo:
        flash('–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
        return redirect(url_for('customer_promo_codes'))
    
    try:
        new_promo = PromoCode(
            code=code,
            amount=amount,
            created_by=current_user.id
        )
        db.session.add(new_promo)
        db.session.commit()
        flash('–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}', 'error')
    
    return redirect(url_for('customer_promo_codes'))

@app.route('/customer/promo-code/toggle/<int:promo_id>')
@login_required
def toggle_promo_code(promo_id):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    promo_code = PromoCode.query.filter_by(id=promo_id, created_by=current_user.id).first()
    if not promo_code:
        flash('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('customer_promo_codes'))
    
    try:
        promo_code.is_active = not promo_code.is_active
        db.session.commit()
        status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if promo_code.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        flash(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{promo_code.code}" {status}!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}', 'error')
    
    return redirect(url_for('customer_promo_codes'))

@app.route('/customer/promo-code/delete/<int:promo_id>')
@login_required
def delete_promo_code(promo_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if current_user.role != 'customer':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    promo_code = PromoCode.query.filter_by(id=promo_id, created_by=current_user.id).first()
    if not promo_code:
        flash('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('customer_promo_codes'))
    
    try:
        db.session.delete(promo_code)
        db.session.commit()
        flash('–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}', 'error')
    
    return redirect(url_for('customer_promo_codes'))

#–°–æ–∑–¥–∞–¥–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏ Ping
@app.route('/client/ping')
@login_required
def ping_service():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª—É–≥–∏ Ping"""
    if current_user.role != 'client':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.', 'error')
        return redirect(url_for('index'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ Ping —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ping_service = Service.query.filter_by(name='–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞').first()
    if not ping_service:
        flash('–£—Å–ª—É–≥–∞ "–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ', 'error')
        return redirect(url_for('client_services'))
    
    user_has_service = UserService.query.filter_by(
        user_id=current_user.id, 
        service_id=ping_service.id
    ).first()
    
    if not user_has_service:
        flash('–£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ª—É–≥–∞ "–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞"', 'error')
        return redirect(url_for('client_services'))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–∏–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ping_history = PingHistory.query.filter_by(user_id=current_user.id)\
        .order_by(PingHistory.created_at.desc())\
        .limit(10)\
        .all()
    
    return render_template('ping_service.html', 
                         ping_history=ping_history,
                         user=current_user)

@app.route('/client/ping/execute', methods=['POST'])
@login_required
def execute_ping():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ping –∫–æ–º–∞–Ω–¥—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if current_user.role != 'client':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    ip_address = request.form.get('ip_address', '').strip()
    
    if not ip_address:
        return jsonify({'success': False, 'message': '–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å'}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–∞
    try:
        import socket
        socket.inet_pton(socket.AF_INET, ip_address)
    except socket.error:
        try:
            socket.inet_pton(socket.AF_INET6, ip_address)
        except socket.error:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –¥–æ–º–µ–Ω
            try:
                socket.gethostbyname(ip_address)
            except socket.error:
                return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –¥–æ–º–µ–Ω–∞'}), 400
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º ping —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        import platform
        import subprocess
        
        param = '-n' if platform.system().lower() == 'windows' else '-c'
        command = ['ping', param, '4', ip_address]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
        if platform.system().lower() == 'windows':
            result = subprocess.run(command, capture_output=True, text=True, timeout=10, encoding='cp866')
        else:
            result = subprocess.run(command, capture_output=True, text=True, timeout=10, encoding='utf-8')
        
        is_online = result.returncode == 0
        ping_result = result.stdout if is_online else result.stderr
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è Windows)
        if platform.system().lower() == 'windows' and '–ã–≤—û“ê–≤' in ping_result:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ä—É—Å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
            ping_result = ping_result.replace('–ã–≤—û“ê–≤ ¬Æ–≤', 'Reply from')
            ping_result = ping_result.replace('–∑–Å–±¬´¬Æ –é ¬©–≤=', 'bytes=')
            ping_result = ping_result.replace('—û–∞“ê¬¨–ø=', 'time=')
            ping_result = ping_result.replace('¬¨–±', 'ms')
            ping_result = ping_result.replace('‚Äò–≤ –≤–Å–±–≤–Å–Ñ Ping', 'Ping statistics')
            ping_result = ping_result.replace('–è –Ñ“ê–≤¬Æ—û: ¬Æ–≤–á–∞ —û¬´“ê¬Æ =', 'Packets: Sent =')
            ping_result = ping_result.replace('–á¬Æ¬´–≥–∑“ê¬Æ =', 'Received =')
            ping_result = ping_result.replace('–á¬Æ–≤“ê–∞–ø¬Æ =', 'Lost =')
            ping_result = ping_result.replace('–è–∞–Å–é¬´–Å¬ß–Å–≤“ê¬´–º¬Æ“ê —û–∞“ê¬¨–ø –á–∞–Å“ê¬¨ -–á“ê–∞“ê¬§ –∑–Å —û ¬¨–±:', 'Approximate round trip times in milli-seconds:')
            ping_result = ping_result.replace('–ä–Å–Å¬¨ ¬´–º¬Æ“ê =', 'Minimum =')
            ping_result = ping_result.replace('–ä –Ñ–±–Å¬¨ ¬´–º¬Æ“ê =', 'Maximum =')
            ping_result = ping_result.replace('‚Äò–∞“ê¬§“ê“ê =', 'Average =')
            ping_result = ping_result.replace('¬¨–±“ê–Ñ', 'ms')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        ping_record = PingHistory(
            user_id=current_user.id,
            ip_address=ip_address,
            result=ping_result
        )
        db.session.add(ping_record)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ ping
        template_data = {
            'subject': '‚úÖ Ping –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ - ProjectX2' if is_online else '‚ùå Ping –Ω–µ —É–¥–∞–ª—Å—è - ProjectX2',
            'template': '''
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Ping</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç ping –¥–ª—è <strong>{ip_address}</strong>:</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {status}</p>
            <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {ping_time}</p>
            <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong></p>
            <pre style="background: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto;">{ping_result}</pre>
            <p><strong>–ö–æ–º–∞–Ω–¥–∞:</strong> {command}</p>
            <hr>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
            '''
        }
        
        send_email(
            to=current_user.email,
            subject=template_data['subject'],
            template=template_data['template'],
            username=current_user.username,
            ip_address=ip_address,
            status='–î–æ—Å—Ç—É–ø–µ–Ω ‚úÖ' if is_online else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå',
            ping_time=datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S'),
            ping_result=ping_result,
            command=' '.join(command)
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä
        server_monitor = ServerMonitor.query.filter_by(
            user_id=current_user.id,
            ip_address=ip_address
        ).first()
        
        if not server_monitor:
            # –ü–µ—Ä–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            server_monitor = ServerMonitor(
                user_id=current_user.id,
                ip_address=ip_address,
                is_online=is_online,
                last_notification=datetime.utcnow() if not is_online else None
            )
            db.session.add(server_monitor)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –æ –Ω–∞—á–∞–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_template = {
                'subject': 'üöÄ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ - ProjectX2',
                'template': '''
                <h2>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</h2>
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
                <p>–ú—ã –Ω–∞—á–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä <strong>{ip_address}</strong>.</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {status}</p>
                <p><strong>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</strong> {start_date}</p>
                <p>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</p>
                <ul>
                    <li>üìß –ï–∂–µ—á–∞—Å–Ω–æ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞</li>
                    <li>‚ö†Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞</li>
                    <li>üìã –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ ping</li>
                </ul>
                <hr>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
                '''
            }
            
            send_email(
                to=current_user.email,
                subject=monitor_template['subject'],
                template=monitor_template['template'],
                username=current_user.username,
                ip_address=ip_address,
                status='–î–æ—Å—Ç—É–ø–µ–Ω' if is_online else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                start_date=datetime.utcnow().strftime('%d.%m.%Y %H:%M')
            )
            
            flash('‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É! –ù–∞—á–∞–ª—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞.', 'success')
        
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            server_monitor.is_online = is_online
            server_monitor.last_check = datetime.utcnow()
        
        db.session.commit()
        
        if is_online:
            return jsonify({
                'success': True, 
                'result': ping_result,
                'message': 'Ping –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.'
            })
        else:
            return jsonify({
                'success': False, 
                'result': ping_result,
                'message': 'Ping –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.'
            })
            
    except subprocess.TimeoutExpired:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
        timeout_template = {
            'subject': '‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Ping - ProjectX2',
            'template': '''
            <h2>–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Ping</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
            <p>Ping –¥–ª—è <strong>{ip_address}</strong> –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.</p>
            <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {ping_time}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –¢–∞–π–º–∞—É—Ç ‚è∞</p>
            <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
            <ul>
                <li>–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</li>
                <li>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é</li>
                <li>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ICMP –∑–∞–ø—Ä–æ—Å–æ–≤</li>
            </ul>
            <hr>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
            '''
        }
        
        send_email(
            to=current_user.email,
            subject=timeout_template['subject'],
            template=timeout_template['template'],
            username=current_user.username,
            ip_address=ip_address,
            ping_time=datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')
        )
        
        return jsonify({'success': False, 'message': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ping. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.'}), 408
        
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_template = {
            'subject': '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Ping - ProjectX2',
            'template': '''
            <h2>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Ping</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
            <p>–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping –¥–ª—è <strong>{ip_address}</strong> –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</p>
            <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {ping_time}</p>
            <p><strong>–û—à–∏–±–∫–∞:</strong> {error_message}</p>
            <hr>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
            '''
        }
        
        send_email(
            to=current_user.email,
            subject=error_template['subject'],
            template=error_template['template'],
            username=current_user.username,
            ip_address=ip_address,
            ping_time=datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S'),
            error_message=str(e)
        )
        
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.'}), 500
    
# –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥–æ–π
@app.route('/client/weather/set_city', methods=['POST'])
@login_required
def set_weather_city():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–ª–µ–∂–∫–∏ –∑–∞ –ø–æ–≥–æ–¥–æ–π"""
    if current_user.role != 'client':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    city = request.form.get('city', '').strip()
    
    if not city:
        return jsonify({'success': False, 'message': '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É—Å–ª—É–≥–∞ –ø–æ–≥–æ–¥—ã
    weather_service = Service.query.filter_by(name='–°–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π').first()
    if not weather_service:
        return jsonify({'success': False, 'message': '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
    
    user_has_service = UserService.query.filter_by(
        user_id=current_user.id, 
        service_id=weather_service.id
    ).first()
    
    if not user_has_service:
        return jsonify({'success': False, 'message': '–£—Å–ª—É–≥–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'}), 403
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        weather_monitor = WeatherMonitor.query.filter_by(
            user_id=current_user.id,
            city=city
        ).first()
        
        if not weather_monitor:
            weather_monitor = WeatherMonitor(
                user_id=current_user.id,
                city=city
            )
            db.session.add(weather_monitor)
            db.session.commit()
            
            flash(f'–ù–∞—á–∞–ª—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city}! –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 7:00.', 'success')
        else:
            flash(f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.', 'info')
            
        return jsonify({'success': True, 'message': '–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/client/weather/check')
@login_required
def check_weather_now():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"""
    if current_user.role != 'client':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'error')
        return redirect(url_for('index'))
    
    weather_service = Service.query.filter_by(name='–°–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π').first()
    if not weather_service:
        flash('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('client_services'))
    
    user_has_service = UserService.query.filter_by(
        user_id=current_user.id, 
        service_id=weather_service.id
    ).first()
    
    if not user_has_service:
        flash('–£—Å–ª—É–≥–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'error')
        return redirect(url_for('client_services'))
    
    weather_monitor = WeatherMonitor.query.filter_by(user_id=current_user.id).first()
    
    if not weather_monitor:
        flash('–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', 'error')
        return redirect(url_for('client_services'))
    
    try:
        weather_data = get_weather_data(weather_monitor.city)
        
        if weather_data['success']:
            recommendations = generate_weather_recommendations(weather_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            template_data = {
                'subject': f'üå§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã –≤ {weather_data["city"]} - ProjectX2',
                'template': '''
                <h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É</h2>
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!</p>
                <p>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ <strong>{city}</strong>:</p>
                
                <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 15px 0;">
                    <p><strong>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)</p>
                    <p><strong>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</strong> {humidity}%</p>
                    <p><strong>üå¨Ô∏è –í–µ—Ç–µ—Ä:</strong> {wind_speed} –º/—Å</p>
                    <p><strong>‚òÄÔ∏è –£–§ –∏–Ω–¥–µ–∫—Å:</strong> {uv_index}</p>
                    <p><strong>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</strong> {description}</p>
                </div>
                
                <h3>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
                <ul>
                    {recommendations}
                </ul>
                
                <p><strong>‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> {check_time}</p>
                <hr>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ProjectX2</p>
                '''
            }
            
            recommendations_html = ''
            if recommendations:
                recommendations_html = ''.join([f'<li>{rec}</li>' for rec in recommendations])
            else:
                recommendations_html = '<li>–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞! –û—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç.</li>'
            
            send_email(
                to=current_user.email,
                subject=template_data['subject'],
                template=template_data['template'],
                username=current_user.username,
                city=weather_data['city'],
                temperature=weather_data['temperature'],
                feels_like=weather_data['feels_like'],
                humidity=weather_data['humidity'],
                wind_speed=weather_data['wind_speed'],
                uv_index=weather_data['uv_index'],
                description=weather_data['description'],
                recommendations=recommendations_html,
                check_time=datetime.utcnow().strftime('%d.%m.%Y %H:%M')
            )
            
            flash('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.', 'success')
        else:
            flash(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {weather_data["error"]}', 'error')
            
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞: {str(e)}', 'error')
    
    return redirect(url_for('client_services'))
# ================== –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ==================

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    with app.app_context():
        db.create_all()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not User.query.filter_by(username='admin').first():
            admin = User(username='admin', email='admin@example.com', role='admin')
            admin.set_password('admin123')
            db.session.add(admin)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
        if not User.query.filter_by(username='customer1').first():
            customer = User(username='customer1', email='customer1@example.com', role='customer')
            customer.set_password('cust123')
            db.session.add(customer)
            db.session.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏
            services = [
                {
                    'name': '–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞',
                    'description': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—Ç–æ—è—Ö. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ping –ª—é–±—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –∏ –¥–æ–º–µ–Ω–æ–≤.',
                    'price': 299.99
                },
                {
                    'name': '–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞',
                    'description': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—Ç–æ—è—Ö',
                    'price': 299.99
                },
                {
                    'name': '–°–ª–µ–∂–∫–∞ –∑–∞ –ø–æ–≥–æ–¥–æ–π', 
                    'description': '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
                    'price': 199.99
                },
                {
                    'name': '–ü–æ—Ä—Ç —á–µ–∫–µ—Ä',
                    'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                    'price': 399.99
                }
            ]
            
            for service_data in services:
                service = Service(
                    name=service_data['name'],
                    description=service_data['description'],
                    price=service_data['price'],
                    customer_id=customer.id
                )
                db.session.add(service)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        if not User.query.filter_by(username='client1').first():
            client = User(username='client1', email='client1@example.com', role='client', balance=1000.0)
            client.set_password('client123')
            db.session.add(client)
        
        db.session.commit()
        print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
        print('üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123')
        print('üëî –ó–∞–∫–∞–∑—á–∏–∫: customer1 / cust123')
        print('üë§ –ö–ª–∏–µ–Ω—Ç: client1 / client123 (–±–∞–ª–∞–Ω—Å: 1000 —Ä—É–±.)')





# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
atexit.register(lambda: scheduler.shutdown() if scheduler.running else None)

if __name__ == '__main__':
    create_tables()
    app.run(debug=True)